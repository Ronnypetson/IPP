Total execution time: 890.614102 (s)


==== Dependence Checker Report Start ====

WAW on file 'CMakeFiles/serial.dir/image-inst.cpp' at line 100 (LCP 86.956520%)
98:   __instrument_this_function();
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 100 and line 108 (LCP 100.000000%)
98:   __instrument_this_function();
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 100 and line 109 (LCP 17.391304%)
98:   __instrument_this_function();
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 100 and line 110 (LCP 78.260872%)
98:   __instrument_this_function();
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAR on 'CMakeFiles/serial.dir/image-inst.cpp' between line 100 and line 122 (LCP 86.956520%)
98:   __instrument_this_function();
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
120: 
121:   __instrument_this_function();
122:  return width; }
123: 
124: /*


WAR on 'CMakeFiles/serial.dir/image-inst.cpp' between line 100 and line 164 (LCP 86.956520%)
98:   __instrument_this_function();
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR on 'CMakeFiles/serial.dir/image-inst.cpp' between line 100 and line 164 (LCP 100.000000%)
98:   __instrument_this_function();
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR on 'CMakeFiles/serial.dir/image-inst.cpp' between line 100 and line 175 (LCP 86.956520%)
98:   __instrument_this_function();
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
173:   __instrument_this_function();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 100 and line 176 (LCP 100.000000%)
98:   __instrument_this_function();
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAR on 'CMakeFiles/serial.dir/image-inst.cpp' between line 100 and line 177 (LCP 86.956520%)
98:   __instrument_this_function();
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 100 and line 177 (LCP 17.391304%)
98:   __instrument_this_function();
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 100 and line 178 (LCP 78.260872%)
98:   __instrument_this_function();
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW on file 'CMakeFiles/serial.dir/image-inst.cpp' at line 101 (LCP 86.956520%)
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 101 and line 108 (LCP 78.260872%)
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 101 and line 109 (LCP 100.000000%)
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 101 and line 110 (LCP 17.391304%)
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAR on 'CMakeFiles/serial.dir/image-inst.cpp' between line 101 and line 132 (LCP 86.956520%)
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
130: 
131:   __instrument_this_function();
132:  return height; }
133: 
134: /*


WAR on 'CMakeFiles/serial.dir/image-inst.cpp' between line 101 and line 164 (LCP 78.260872%)
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR on 'CMakeFiles/serial.dir/image-inst.cpp' between line 101 and line 175 (LCP 86.956520%)
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
173:   __instrument_this_function();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 101 and line 176 (LCP 78.260872%)
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 101 and line 177 (LCP 100.000000%)
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 101 and line 178 (LCP 17.391304%)
99: 
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW on file 'CMakeFiles/serial.dir/image-inst.cpp' at line 102 (LCP 86.956520%)
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 102 and line 108 (LCP 17.391304%)
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 102 and line 109 (LCP 78.260872%)
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 102 and line 110 (LCP 100.000000%)
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAR on 'CMakeFiles/serial.dir/image-inst.cpp' between line 102 and line 142 (LCP 86.956520%)
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
140: 
141:   __instrument_this_function();
142:  return depth; }
143: 
144: /*


WAR on 'CMakeFiles/serial.dir/image-inst.cpp' between line 102 and line 164 (LCP 17.391304%)
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 102 and line 176 (LCP 17.391304%)
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 102 and line 177 (LCP 78.260872%)
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 102 and line 178 (LCP 100.000000%)
100:   this->width = width;
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW on file 'CMakeFiles/serial.dir/image-inst.cpp' at line 103 (LCP 86.956520%)
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 103 and line 108 (LCP 100.000000%)
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 103 and line 109 (LCP 17.391304%)
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 103 and line 110 (LCP 78.260872%)
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAR on 'CMakeFiles/serial.dir/image-inst.cpp' between line 103 and line 152 (LCP 86.956520%)
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
150: 
151:   __instrument_this_function();
152:  return maxcolor; }
153: 
154: /*


WAR on 'CMakeFiles/serial.dir/image-inst.cpp' between line 103 and line 164 (LCP 100.000000%)
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 103 and line 176 (LCP 100.000000%)
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 103 and line 177 (LCP 17.391304%)
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 103 and line 178 (LCP 78.260872%)
101:   this->height = height;
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW on file 'CMakeFiles/serial.dir/image-inst.cpp' at line 104 (LCP 86.956520%)
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 104 and line 108 (LCP 78.260872%)
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 104 and line 109 (LCP 100.000000%)
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 104 and line 110 (LCP 17.391304%)
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAR on 'CMakeFiles/serial.dir/image-inst.cpp' between line 104 and line 164 (LCP 78.260872%)
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 104 and line 176 (LCP 78.260872%)
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 104 and line 177 (LCP 100.000000%)
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 104 and line 178 (LCP 17.391304%)
102:   this->depth = depth;
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW on file 'CMakeFiles/serial.dir/image-inst.cpp' at line 105 (LCP 86.956520%)
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 105 and line 108 (LCP 17.391304%)
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 105 and line 109 (LCP 78.260872%)
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 105 and line 110 (LCP 100.000000%)
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAR on 'CMakeFiles/serial.dir/image-inst.cpp' between line 105 and line 164 (LCP 17.391304%)
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 105 and line 176 (LCP 17.391304%)
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 105 and line 177 (LCP 78.260872%)
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 105 and line 178 (LCP 100.000000%)
103:   this->maxcolor = RGB_MAX_COLOR;
104:   x_off = (float)width / 2.0;
105:   y_off = (float)height / 2.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW on file 'CMakeFiles/serial.dir/image-inst.cpp' at line 108 (LCP 78.260872%)
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 108 and line 109 (LCP 100.000000%)
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 108 and line 110 (LCP 17.391304%)
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 108 and line 176 (LCP 78.260872%)
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 108 and line 177 (LCP 100.000000%)
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 108 and line 178 (LCP 17.391304%)
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 108 and line 211 (LCP 86.956520%)
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
212:   }
213: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 122 and line 108 (LCP 100.000000%)
120: 
121:   __instrument_this_function();
122:  return width; }
123: 
124: /*
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 132 and line 108 (LCP 78.260872%)
130: 
131:   __instrument_this_function();
132:  return height; }
133: 
134: /*
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 142 and line 108 (LCP 17.391304%)
140: 
141:   __instrument_this_function();
142:  return depth; }
143: 
144: /*
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 152 and line 108 (LCP 4.347826%)
150: 
151:   __instrument_this_function();
152:  return maxcolor; }
153: 
154: /*
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 164 and line 108 (LCP 100.000000%)
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 164 and line 108 (LCP 78.260872%)
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 175 and line 108 (LCP 100.000000%)
173:   __instrument_this_function();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 175 and line 108 (LCP 78.260872%)
173:   __instrument_this_function();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 176 and line 108 (LCP 78.260872%)
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 177 and line 108 (LCP 100.000000%)
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 209 and line 108 (LCP 78.260872%)
207:   __instrument_this_function();
208: 
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:43' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
41:   int i;
42:   for (i = 0; i < NRAN; i++) {
43:     urand[i].x = (double)rand() / RAND_MAX - 0.5;
44:   }
45:   for (i = 0; i < NRAN; i++) {
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:49' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
47:   }
48:   for (i = 0; i < NRAN; i++) {
49:     irand[i] = (int)(NRAN * ((double)rand() / RAND_MAX));
50:   }
51:   cout << "Loading from file " << srcname << endl;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:60' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
58:   fclose(fp);
59: 
60:   this->xres = xres;
61:   this->yres = yres;
62:   this->rays_per_pixel = rpp;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:512' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
510:     if (type == 's') {
511:       struct sphere *sph = new sphere();
512:       sph->next = obj_list->next;
513:       obj_list->next = sph;
514: 
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:513' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
511:       struct sphere *sph = new sphere();
512:       sph->next = obj_list->next;
513:       obj_list->next = sph;
514: 
515:       sph->pos = pos;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:77' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
75: 
76:   for (int i = 0; i < yres; i++) {
77:     render_scanline(xres, yres, i, out, rays_per_pixel);
78:   }
79: }
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:90' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
88: 
89:   out.clean();
90:   struct sphere *walker = obj_list;
91:   while (walker) {
92:     struct sphere *tmp = walker;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:117' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
115: 
116:   fprintf(stdout, "RayTracing Kernel:\n");
117:   fprintf(stdout, "Width: %d\t Height: %d\n", xres, yres);
118:   fprintf(stdout, "Aspect Ratio: %.1f\t RPP: %d\n", aspect, rays_per_pixel);
119:   fprintf(stdout, "Number of lights: %d\n\n", lnum);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:166' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
164:   struct spoint sp, nearest_sp;
165:   struct sphere *nearest_obj = 0;
166:   struct sphere *iter = obj_list->next;
167: 
168:   /* if we reached the recursion limit, bail out */
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:302' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
300: 
301:   k.x = cam.targ.x - cam.pos.x;
302:   k.y = cam.targ.y - cam.pos.y;
303:   k.z = cam.targ.z - cam.pos.z;
304:   NORMALIZE(k);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:302' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
300: 
301:   k.x = cam.targ.x - cam.pos.x;
302:   k.y = cam.targ.y - cam.pos.y;
303:   k.z = cam.targ.z - cam.pos.z;
304:   NORMALIZE(k);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:335' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
333:            cam.pos.x;
334:   orig.y = ray.orig.x * m[1][0] + ray.orig.y * m[1][1] + ray.orig.z * m[1][2] +
335:            cam.pos.y;
336:   orig.z = ray.orig.x * m[2][0] + ray.orig.y * m[2][1] + ray.orig.z * m[2][2] +
337:            cam.pos.z;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:210' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
208:     struct vec3 ldir;
209:     struct ray shadow_ray;
210:     struct sphere *iter = obj_list->next;
211:     int in_shadow = 0;
212: 
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:215' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
213:     ldir.x = lights[i].x - sp->pos.x;
214:     ldir.y = lights[i].y - sp->pos.y;
215:     ldir.z = lights[i].z - sp->pos.z;
216: 
217:     shadow_ray.orig = sp->pos;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:355' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
353: 
354:   if (sf == 0.0) {
355:     sf = 1.5 / (double)xres;
356:   }
357: 
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:375' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
373: 
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:375' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
373: 
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:376' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
378: }
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:61' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 8.695652%)
59:   __instrument_this_function();
60: 
61:   this->angle = angle;
62:   this->destname = destname;
63:   c1.x = 0.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:63' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
61:   this->angle = angle;
62:   this->destname = destname;
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:64' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
62:   this->destname = destname;
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:65' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 8.695652%)
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:66' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:67' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:68' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 8.695652%)
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:69' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:70' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
72:   this->output = new Image();
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:71' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
72:   this->output = new Image();
73: 
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:77' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
75:   float xc = (float)input->getWidth() / 2.0;
76:   float yc = (float)input->getHeight() / 2.0;
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:78' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 8.695652%)
76:   float yc = (float)input->getHeight() / 2.0;
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:79' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:80' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:81' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 8.695652%)
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:82' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:83' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:84' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 8.695652%)
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
86:   return true;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:85' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
86:   return true;
87: }
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:100' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
98:   __instrument_this_function();
99: 
100:   if (!initialized) {
101:     fprintf(stderr, "Kernel Called Without Initialization\n");
102:     return;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:104' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
102:     return;
103:   }
104:   if (done) {
105:     fprintf(stderr, "Kernel Already Executed\n");
106:     return;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:109' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
107:   }
108: 
109:   unsigned int height = input->getHeight();
110:   unsigned int width = input->getWidth();
111:   // unsigned int depth = input->getDepth();
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:110' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
108: 
109:   unsigned int height = input->getHeight();
110:   unsigned int width = input->getWidth();
111:   // unsigned int depth = input->getDepth();
112: 
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:126' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 8.695652%)
124: 
125:   /* STEP 1 */
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:127' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 8.695652%)
125:   /* STEP 1 */
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:128' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 8.695652%)
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
130:   int target_h = computeTargetHeight();
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 8.695652%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:129' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 8.695652%)
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
130:   int target_h = computeTargetHeight();
131:   int target_w = computeTargetWidth();
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:132' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
130:   int target_h = computeTargetHeight();
131:   int target_w = computeTargetWidth();
132:   output->createImageFromTemplate(target_w, target_h, RGB_DEPTH);
133: 
134:   /* STEP 2 */
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:135' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 8.695652%)
133: 
134:   /* STEP 2 */
135:   unsigned int rev_angle = 360 - angle;
136:   float x_offset_target = (float)target_w / 2.0;
137:   float y_offset_target = (float)target_h / 2.0;
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:147' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
145: 
146:       /* If original image contains point, sample colour and write back */
147:       if (input->containsPixel(&origin_pix)) {
148:         int samples[4][2];
149:         Pixel colors[4];
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:158' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
156:                           ((k == 1 || k == 3) ? 1 : 0);
157:           // Must make sure sample positions are still valid image pixels
158:           if (samples[k][0] >= input->getWidth()) {
159:             samples[k][0] = input->getWidth() - 1;
160:           }
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:159' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
157:           // Must make sure sample positions are still valid image pixels
158:           if (samples[k][0] >= input->getWidth()) {
159:             samples[k][0] = input->getWidth() - 1;
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:161' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
159:             samples[k][0] = input->getWidth() - 1;
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
162:             samples[k][1] = input->getHeight() - 1;
163:           }
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:162' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
162:             samples[k][1] = input->getHeight() - 1;
163:           }
164:         }
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:176' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
174: 
175:         /* Write output */
176:         output->setPixelAt(j, i, & final);
177:       } else {
178:         /* Pixel is not in source image, write black color */
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:180' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
178:         /* Pixel is not in source image, write black color */
179:         Pixel final = {0, 0, 0};
180:         output->setPixelAt(j, i, & final);
181:       }
182:     }
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:185' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
183:   }
184: 
185:   done = true;
186: }
187: 
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 8.695652%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 8.695652%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:201' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
199:     fprintf(stderr, "Could Not Write Rotation Output\n");
200:   }
201:   output->clean();
202:   delete output;
203: }
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 211 and line 108 (LCP 78.260872%)
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
212:   }
213: }
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:202' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
200:   }
201:   output->clean();
202:   delete output;
203: }
204: 
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:239' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
237:   __instrument_this_function();
238: 
239:   if (!done) {
240:     return false;
241:   }
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:247' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
245:     return false;
246:   }
247:   if (output->getDepth() == 3) {
248:     out << "P6\n";
249:   } else {
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:252' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
250:     return false;
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:252' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
250:     return false;
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:253' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:254' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:255' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
257:       out.put(p.r);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:256' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 17.391304%)
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
257:       out.put(p.r);
258:       out.put(p.g);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:216' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
214: 
215:   fprintf(stdout, "Rotation Kernel:\n");
216:   fprintf(stdout, "Width: %d\t Height: %d\n", input->getWidth(),
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:217' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
215:   fprintf(stdout, "Rotation Kernel:\n");
216:   fprintf(stdout, "Width: %d\t Height: %d\n", input->getWidth(),
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:219' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:219' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 73.913040%)
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:220' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 8.695652%)
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
222: }
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:278' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:278' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:277' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
275:                                       
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:280' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
282: 
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:280' and 'CMakeFiles/serial.dir/image-inst.cpp:108' (LCP 100.000000%)
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
282: 
106:   pixels = new Pixel[width * height];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 122 and line 109 (LCP 17.391304%)
120: 
121:   __instrument_this_function();
122:  return width; }
123: 
124: /*
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 132 and line 109 (LCP 100.000000%)
130: 
131:   __instrument_this_function();
132:  return height; }
133: 
134: /*
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 142 and line 109 (LCP 78.260872%)
140: 
141:   __instrument_this_function();
142:  return depth; }
143: 
144: /*
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 152 and line 109 (LCP 17.391304%)
150: 
151:   __instrument_this_function();
152:  return maxcolor; }
153: 
154: /*
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 164 and line 109 (LCP 17.391304%)
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 164 and line 109 (LCP 100.000000%)
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 175 and line 109 (LCP 17.391304%)
173:   __instrument_this_function();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 175 and line 109 (LCP 100.000000%)
173:   __instrument_this_function();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 176 and line 109 (LCP 100.000000%)
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 177 and line 109 (LCP 17.391304%)
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 192 and line 109 (LCP 100.000000%)
190:   __instrument_this_function();
191: 
192:   bool x_correct = (pix->x < x_off) && (pix->x > (0.0 - x_off));
193:   bool y_correct = (pix->y < y_off) && (pix->y > (0.0 - y_off));
194:   if (x_correct && y_correct) {
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 209 and line 109 (LCP 100.000000%)
207:   __instrument_this_function();
208: 
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:49' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
47:   }
48:   for (i = 0; i < NRAN; i++) {
49:     irand[i] = (int)(NRAN * ((double)rand() / RAND_MAX));
50:   }
51:   cout << "Loading from file " << srcname << endl;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:61' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
59: 
60:   this->xres = xres;
61:   this->yres = yres;
62:   this->rays_per_pixel = rpp;
63:   aspect = (double)xres / (double)yres;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:63' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
61:   this->yres = yres;
62:   this->rays_per_pixel = rpp;
63:   aspect = (double)xres / (double)yres;
64: 
65:   out.createImageFromTemplate(xres, yres, RGB_DEPTH);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:496' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
494:       cam.pos = pos;
495:       cam.targ = col;
496:       cam.fov = rad;
497:       continue;
498:     }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:512' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 95.652176%)
510:     if (type == 's') {
511:       struct sphere *sph = new sphere();
512:       sph->next = obj_list->next;
513:       obj_list->next = sph;
514: 
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:76' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
74:   __instrument_this_function();
75: 
76:   for (int i = 0; i < yres; i++) {
77:     render_scanline(xres, yres, i, out, rays_per_pixel);
78:   }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:76' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
74:   __instrument_this_function();
75: 
76:   for (int i = 0; i < yres; i++) {
77:     render_scanline(xres, yres, i, out, rays_per_pixel);
78:   }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 211 and line 109 (LCP 100.000000%)
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
212:   }
213: }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:93' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 95.652176%)
91:   while (walker) {
92:     struct sphere *tmp = walker;
93:     walker = walker->next;
94:     delete tmp;
95:   }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:117' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
115: 
116:   fprintf(stdout, "RayTracing Kernel:\n");
117:   fprintf(stdout, "Width: %d\t Height: %d\n", xres, yres);
118:   fprintf(stdout, "Aspect Ratio: %.1f\t RPP: %d\n", aspect, rays_per_pixel);
119:   fprintf(stdout, "Number of lights: %d\n\n", lnum);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:118' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
116:   fprintf(stdout, "RayTracing Kernel:\n");
117:   fprintf(stdout, "Width: %d\t Height: %d\n", xres, yres);
118:   fprintf(stdout, "Aspect Ratio: %.1f\t RPP: %d\n", aspect, rays_per_pixel);
119:   fprintf(stdout, "Number of lights: %d\n\n", lnum);
120: }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:166' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 95.652176%)
164:   struct spoint sp, nearest_sp;
165:   struct sphere *nearest_obj = 0;
166:   struct sphere *iter = obj_list->next;
167: 
168:   /* if we reached the recursion limit, bail out */
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:301' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
299:   struct vec3 i, j = {0, 1, 0}, k, dir, orig, foo;
300: 
301:   k.x = cam.targ.x - cam.pos.x;
302:   k.y = cam.targ.y - cam.pos.y;
303:   k.z = cam.targ.z - cam.pos.z;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:301' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
299:   struct vec3 i, j = {0, 1, 0}, k, dir, orig, foo;
300: 
301:   k.x = cam.targ.x - cam.pos.x;
302:   k.y = cam.targ.y - cam.pos.y;
303:   k.z = cam.targ.z - cam.pos.z;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:333' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
331: 
332:   orig.x = ray.orig.x * m[0][0] + ray.orig.y * m[0][1] + ray.orig.z * m[0][2] +
333:            cam.pos.x;
334:   orig.y = ray.orig.x * m[1][0] + ray.orig.y * m[1][1] + ray.orig.z * m[1][2] +
335:            cam.pos.y;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:210' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 95.652176%)
208:     struct vec3 ldir;
209:     struct ray shadow_ray;
210:     struct sphere *iter = obj_list->next;
211:     int in_shadow = 0;
212: 
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:214' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
212: 
213:     ldir.x = lights[i].x - sp->pos.x;
214:     ldir.y = lights[i].y - sp->pos.y;
215:     ldir.z = lights[i].z - sp->pos.z;
216: 
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:359' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
357: 
358:   pt.x = ((double)x / (double)xres) - 0.5;
359:   pt.y = -(((double)y / (double)yres) - 0.65) / aspect;
360: 
361:   if (sample) {
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:359' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
357: 
358:   pt.x = ((double)x / (double)xres) - 0.5;
359:   pt.y = -(((double)y / (double)yres) - 0.65) / aspect;
360: 
361:   if (sample) {
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:364' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
362:     struct vec3 jt = jitter(x, y, sample);
363:     pt.x += jt.x * sf;
364:     pt.y += jt.y * sf / aspect;
365:   }
366:   return pt;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:375' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
373: 
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:376' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
378: }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:61' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 73.913040%)
59:   __instrument_this_function();
60: 
61:   this->angle = angle;
62:   this->destname = destname;
63:   c1.x = 0.0;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:63' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
61:   this->angle = angle;
62:   this->destname = destname;
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:64' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
62:   this->destname = destname;
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:65' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 73.913040%)
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:66' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:67' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:68' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 73.913040%)
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:69' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:70' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
72:   this->output = new Image();
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:71' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
72:   this->output = new Image();
73: 
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:77' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
75:   float xc = (float)input->getWidth() / 2.0;
76:   float yc = (float)input->getHeight() / 2.0;
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:78' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 73.913040%)
76:   float yc = (float)input->getHeight() / 2.0;
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:79' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:80' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:81' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 73.913040%)
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:82' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:83' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:84' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 73.913040%)
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
86:   return true;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:85' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
86:   return true;
87: }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:100' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
98:   __instrument_this_function();
99: 
100:   if (!initialized) {
101:     fprintf(stderr, "Kernel Called Without Initialization\n");
102:     return;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:104' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
102:     return;
103:   }
104:   if (done) {
105:     fprintf(stderr, "Kernel Already Executed\n");
106:     return;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:109' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
107:   }
108: 
109:   unsigned int height = input->getHeight();
110:   unsigned int width = input->getWidth();
111:   // unsigned int depth = input->getDepth();
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:110' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
108: 
109:   unsigned int height = input->getHeight();
110:   unsigned int width = input->getWidth();
111:   // unsigned int depth = input->getDepth();
112: 
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:126' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 73.913040%)
124: 
125:   /* STEP 1 */
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:127' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 73.913040%)
125:   /* STEP 1 */
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:128' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 73.913040%)
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
130:   int target_h = computeTargetHeight();
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 73.913040%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:129' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 73.913040%)
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
130:   int target_h = computeTargetHeight();
131:   int target_w = computeTargetWidth();
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:132' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
130:   int target_h = computeTargetHeight();
131:   int target_w = computeTargetWidth();
132:   output->createImageFromTemplate(target_w, target_h, RGB_DEPTH);
133: 
134:   /* STEP 2 */
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:135' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 73.913040%)
133: 
134:   /* STEP 2 */
135:   unsigned int rev_angle = 360 - angle;
136:   float x_offset_target = (float)target_w / 2.0;
137:   float y_offset_target = (float)target_h / 2.0;
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:147' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
145: 
146:       /* If original image contains point, sample colour and write back */
147:       if (input->containsPixel(&origin_pix)) {
148:         int samples[4][2];
149:         Pixel colors[4];
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:158' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
156:                           ((k == 1 || k == 3) ? 1 : 0);
157:           // Must make sure sample positions are still valid image pixels
158:           if (samples[k][0] >= input->getWidth()) {
159:             samples[k][0] = input->getWidth() - 1;
160:           }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:159' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
157:           // Must make sure sample positions are still valid image pixels
158:           if (samples[k][0] >= input->getWidth()) {
159:             samples[k][0] = input->getWidth() - 1;
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:161' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
159:             samples[k][0] = input->getWidth() - 1;
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
162:             samples[k][1] = input->getHeight() - 1;
163:           }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:162' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
162:             samples[k][1] = input->getHeight() - 1;
163:           }
164:         }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:176' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
174: 
175:         /* Write output */
176:         output->setPixelAt(j, i, & final);
177:       } else {
178:         /* Pixel is not in source image, write black color */
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:180' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
178:         /* Pixel is not in source image, write black color */
179:         Pixel final = {0, 0, 0};
180:         output->setPixelAt(j, i, & final);
181:       }
182:     }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:185' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
183:   }
184: 
185:   done = true;
186: }
187: 
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 73.913040%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 73.913040%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:201' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
199:     fprintf(stderr, "Could Not Write Rotation Output\n");
200:   }
201:   output->clean();
202:   delete output;
203: }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 211 and line 109 (LCP 4.347826%)
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
212:   }
213: }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:202' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
200:   }
201:   output->clean();
202:   delete output;
203: }
204: 
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:239' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
237:   __instrument_this_function();
238: 
239:   if (!done) {
240:     return false;
241:   }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:247' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
245:     return false;
246:   }
247:   if (output->getDepth() == 3) {
248:     out << "P6\n";
249:   } else {
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:252' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
250:     return false;
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:252' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
250:     return false;
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:253' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:254' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:255' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
257:       out.put(p.r);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:256' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 8.695652%)
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
257:       out.put(p.r);
258:       out.put(p.g);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:216' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
214: 
215:   fprintf(stdout, "Rotation Kernel:\n");
216:   fprintf(stdout, "Width: %d\t Height: %d\n", input->getWidth(),
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:217' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
215:   fprintf(stdout, "Rotation Kernel:\n");
216:   fprintf(stdout, "Width: %d\t Height: %d\n", input->getWidth(),
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:219' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:219' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 17.391304%)
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:220' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 73.913040%)
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
222: }
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:278' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:278' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:277' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
275:                                       
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:280' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
282: 
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:280' and 'CMakeFiles/serial.dir/image-inst.cpp:109' (LCP 100.000000%)
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
282: 
107:   for (int i = 0; i < width * height; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 122 and line 110 (LCP 78.260872%)
120: 
121:   __instrument_this_function();
122:  return width; }
123: 
124: /*
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 132 and line 110 (LCP 17.391304%)
130: 
131:   __instrument_this_function();
132:  return height; }
133: 
134: /*
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 142 and line 110 (LCP 4.347826%)
140: 
141:   __instrument_this_function();
142:  return depth; }
143: 
144: /*
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 152 and line 110 (LCP 78.260872%)
150: 
151:   __instrument_this_function();
152:  return maxcolor; }
153: 
154: /*
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 164 and line 110 (LCP 78.260872%)
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 164 and line 110 (LCP 17.391304%)
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 175 and line 110 (LCP 78.260872%)
173:   __instrument_this_function();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 175 and line 110 (LCP 17.391304%)
173:   __instrument_this_function();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 176 and line 110 (LCP 17.391304%)
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 177 and line 110 (LCP 78.260872%)
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 193 and line 110 (LCP 100.000000%)
191: 
192:   bool x_correct = (pix->x < x_off) && (pix->x > (0.0 - x_off));
193:   bool y_correct = (pix->y < y_off) && (pix->y > (0.0 - y_off));
194:   if (x_correct && y_correct) {
195:     return true;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 209 and line 110 (LCP 17.391304%)
207:   __instrument_this_function();
208: 
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:46' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
44:   }
45:   for (i = 0; i < NRAN; i++) {
46:     urand[i].y = (double)rand() / RAND_MAX - 0.5;
47:   }
48:   for (i = 0; i < NRAN; i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:49' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
47:   }
48:   for (i = 0; i < NRAN; i++) {
49:     irand[i] = (int)(NRAN * ((double)rand() / RAND_MAX));
50:   }
51:   cout << "Loading from file " << srcname << endl;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:53' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
51:   cout << "Loading from file " << srcname << endl;
52:   FILE *fp = fopen(srcname.c_str(), "r");
53:   lnum = 0;
54:   if (!fp) {
55:     return false;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:62' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
60:   this->xres = xres;
61:   this->yres = yres;
62:   this->rays_per_pixel = rpp;
63:   aspect = (double)xres / (double)yres;
64: 
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:477' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
475: 
476:     if (type == 'l') {
477:       lights[lnum++] = pos;
478:       continue;
479:     }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:477' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
475: 
476:     if (type == 'l') {
477:       lights[lnum++] = pos;
478:       continue;
479:     }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:77' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
75: 
76:   for (int i = 0; i < yres; i++) {
77:     render_scanline(xres, yres, i, out, rays_per_pixel);
78:   }
79: }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:118' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
116:   fprintf(stdout, "RayTracing Kernel:\n");
117:   fprintf(stdout, "Width: %d\t Height: %d\n", xres, yres);
118:   fprintf(stdout, "Aspect Ratio: %.1f\t RPP: %d\n", aspect, rays_per_pixel);
119:   fprintf(stdout, "Number of lights: %d\n\n", lnum);
120: }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:119' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
117:   fprintf(stdout, "Width: %d\t Height: %d\n", xres, yres);
118:   fprintf(stdout, "Aspect Ratio: %.1f\t RPP: %d\n", aspect, rays_per_pixel);
119:   fprintf(stdout, "Number of lights: %d\n\n", lnum);
120: }
121: 
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:303' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
301:   k.x = cam.targ.x - cam.pos.x;
302:   k.y = cam.targ.y - cam.pos.y;
303:   k.z = cam.targ.z - cam.pos.z;
304:   NORMALIZE(k);
305: 
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:303' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
301:   k.x = cam.targ.x - cam.pos.x;
302:   k.y = cam.targ.y - cam.pos.y;
303:   k.z = cam.targ.z - cam.pos.z;
304:   NORMALIZE(k);
305: 
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:337' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
335:            cam.pos.y;
336:   orig.z = ray.orig.x * m[2][0] + ray.orig.y * m[2][1] + ray.orig.z * m[2][2] +
337:            cam.pos.z;
338: 
339:   ray.orig = orig;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:206' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
204: 
205:   /* for all lights ... */
206:   for (i = 0; i < lnum; i++) {
207:     double ispec, idiff;
208:     struct vec3 ldir;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:213' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
211:     int in_shadow = 0;
212: 
213:     ldir.x = lights[i].x - sp->pos.x;
214:     ldir.y = lights[i].y - sp->pos.y;
215:     ldir.z = lights[i].z - sp->pos.z;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:206' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
204: 
205:   /* for all lights ... */
206:   for (i = 0; i < lnum; i++) {
207:     double ispec, idiff;
208:     struct vec3 ldir;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:375' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
373: 
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:376' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
378: }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:376' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
378: }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:61' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 17.391304%)
59:   __instrument_this_function();
60: 
61:   this->angle = angle;
62:   this->destname = destname;
63:   c1.x = 0.0;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:63' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
61:   this->angle = angle;
62:   this->destname = destname;
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:64' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
62:   this->destname = destname;
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:65' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 17.391304%)
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:66' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:67' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:68' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 17.391304%)
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:69' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:70' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
72:   this->output = new Image();
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:71' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
72:   this->output = new Image();
73: 
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:77' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
75:   float xc = (float)input->getWidth() / 2.0;
76:   float yc = (float)input->getHeight() / 2.0;
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:78' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 17.391304%)
76:   float yc = (float)input->getHeight() / 2.0;
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:79' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:80' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:81' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 17.391304%)
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:82' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:83' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:84' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 17.391304%)
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
86:   return true;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:85' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
86:   return true;
87: }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:100' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
98:   __instrument_this_function();
99: 
100:   if (!initialized) {
101:     fprintf(stderr, "Kernel Called Without Initialization\n");
102:     return;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:104' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
102:     return;
103:   }
104:   if (done) {
105:     fprintf(stderr, "Kernel Already Executed\n");
106:     return;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:109' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
107:   }
108: 
109:   unsigned int height = input->getHeight();
110:   unsigned int width = input->getWidth();
111:   // unsigned int depth = input->getDepth();
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:110' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
108: 
109:   unsigned int height = input->getHeight();
110:   unsigned int width = input->getWidth();
111:   // unsigned int depth = input->getDepth();
112: 
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:126' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 17.391304%)
124: 
125:   /* STEP 1 */
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:127' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 17.391304%)
125:   /* STEP 1 */
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:128' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 17.391304%)
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
130:   int target_h = computeTargetHeight();
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 17.391304%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:129' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 17.391304%)
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
130:   int target_h = computeTargetHeight();
131:   int target_w = computeTargetWidth();
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:132' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
130:   int target_h = computeTargetHeight();
131:   int target_w = computeTargetWidth();
132:   output->createImageFromTemplate(target_w, target_h, RGB_DEPTH);
133: 
134:   /* STEP 2 */
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:135' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 17.391304%)
133: 
134:   /* STEP 2 */
135:   unsigned int rev_angle = 360 - angle;
136:   float x_offset_target = (float)target_w / 2.0;
137:   float y_offset_target = (float)target_h / 2.0;
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:147' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
145: 
146:       /* If original image contains point, sample colour and write back */
147:       if (input->containsPixel(&origin_pix)) {
148:         int samples[4][2];
149:         Pixel colors[4];
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:158' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
156:                           ((k == 1 || k == 3) ? 1 : 0);
157:           // Must make sure sample positions are still valid image pixels
158:           if (samples[k][0] >= input->getWidth()) {
159:             samples[k][0] = input->getWidth() - 1;
160:           }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:159' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
157:           // Must make sure sample positions are still valid image pixels
158:           if (samples[k][0] >= input->getWidth()) {
159:             samples[k][0] = input->getWidth() - 1;
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:161' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
159:             samples[k][0] = input->getWidth() - 1;
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
162:             samples[k][1] = input->getHeight() - 1;
163:           }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:162' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
162:             samples[k][1] = input->getHeight() - 1;
163:           }
164:         }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:176' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
174: 
175:         /* Write output */
176:         output->setPixelAt(j, i, & final);
177:       } else {
178:         /* Pixel is not in source image, write black color */
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:180' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
178:         /* Pixel is not in source image, write black color */
179:         Pixel final = {0, 0, 0};
180:         output->setPixelAt(j, i, & final);
181:       }
182:     }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:185' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
183:   }
184: 
185:   done = true;
186: }
187: 
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 17.391304%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 17.391304%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:201' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
199:     fprintf(stderr, "Could Not Write Rotation Output\n");
200:   }
201:   output->clean();
202:   delete output;
203: }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 211 and line 110 (LCP 17.391304%)
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
212:   }
213: }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:202' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
200:   }
201:   output->clean();
202:   delete output;
203: }
204: 
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:239' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
237:   __instrument_this_function();
238: 
239:   if (!done) {
240:     return false;
241:   }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:247' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
245:     return false;
246:   }
247:   if (output->getDepth() == 3) {
248:     out << "P6\n";
249:   } else {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:252' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
250:     return false;
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:252' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
250:     return false;
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:253' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:254' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:255' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
257:       out.put(p.r);
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:256' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 73.913040%)
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
257:       out.put(p.r);
258:       out.put(p.g);
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:216' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
214: 
215:   fprintf(stdout, "Rotation Kernel:\n");
216:   fprintf(stdout, "Width: %d\t Height: %d\n", input->getWidth(),
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:217' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
215:   fprintf(stdout, "Rotation Kernel:\n");
216:   fprintf(stdout, "Width: %d\t Height: %d\n", input->getWidth(),
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:219' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:219' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 8.695652%)
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:220' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 17.391304%)
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
222: }
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:278' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:278' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:277' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
275:                                       
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:280' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
282: 
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:280' and 'CMakeFiles/serial.dir/image-inst.cpp:110' (LCP 100.000000%)
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
282: 
108:     pixels[i].r = 0;
109:     pixels[i].g = 0;
110:     pixels[i].b = 0;
111:   }
112: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 122 and line 176 (LCP 100.000000%)
120: 
121:   __instrument_this_function();
122:  return width; }
123: 
124: /*
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 122 and line 177 (LCP 17.391304%)
120: 
121:   __instrument_this_function();
122:  return width; }
123: 
124: /*
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 122 and line 178 (LCP 78.260872%)
120: 
121:   __instrument_this_function();
122:  return width; }
123: 
124: /*
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 132 and line 176 (LCP 78.260872%)
130: 
131:   __instrument_this_function();
132:  return height; }
133: 
134: /*
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 132 and line 177 (LCP 100.000000%)
130: 
131:   __instrument_this_function();
132:  return height; }
133: 
134: /*
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 132 and line 178 (LCP 17.391304%)
130: 
131:   __instrument_this_function();
132:  return height; }
133: 
134: /*
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 142 and line 176 (LCP 17.391304%)
140: 
141:   __instrument_this_function();
142:  return depth; }
143: 
144: /*
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 142 and line 177 (LCP 78.260872%)
140: 
141:   __instrument_this_function();
142:  return depth; }
143: 
144: /*
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 142 and line 178 (LCP 4.347826%)
140: 
141:   __instrument_this_function();
142:  return depth; }
143: 
144: /*
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 152 and line 176 (LCP 4.347826%)
150: 
151:   __instrument_this_function();
152:  return maxcolor; }
153: 
154: /*
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 152 and line 177 (LCP 17.391304%)
150: 
151:   __instrument_this_function();
152:  return maxcolor; }
153: 
154: /*
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 152 and line 178 (LCP 78.260872%)
150: 
151:   __instrument_this_function();
152:  return maxcolor; }
153: 
154: /*
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 164 and line 176 (LCP 100.000000%)
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 164 and line 177 (LCP 17.391304%)
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 164 and line 178 (LCP 78.260872%)
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 164 and line 176 (LCP 78.260872%)
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 164 and line 177 (LCP 100.000000%)
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 164 and line 178 (LCP 17.391304%)
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 164 and line 211 (LCP 86.956520%)
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
212:   }
213: }


WAR between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:43' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 100.000000%)
41:   int i;
42:   for (i = 0; i < NRAN; i++) {
43:     urand[i].x = (double)rand() / RAND_MAX - 0.5;
44:   }
45:   for (i = 0; i < NRAN; i++) {
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:49' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 100.000000%)
47:   }
48:   for (i = 0; i < NRAN; i++) {
49:     irand[i] = (int)(NRAN * ((double)rand() / RAND_MAX));
50:   }
51:   cout << "Loading from file " << srcname << endl;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:60' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 100.000000%)
58:   fclose(fp);
59: 
60:   this->xres = xres;
61:   this->yres = yres;
62:   this->rays_per_pixel = rpp;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:61' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 8.695652%)
59:   __instrument_this_function();
60: 
61:   this->angle = angle;
62:   this->destname = destname;
63:   c1.x = 0.0;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:63' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 13.043478%)
61:   this->angle = angle;
62:   this->destname = destname;
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:64' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 73.913040%)
62:   this->destname = destname;
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:65' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 4.347826%)
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:66' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 17.391304%)
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:67' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 73.913040%)
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:68' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 8.695652%)
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:69' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 17.391304%)
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:70' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 73.913040%)
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
72:   this->output = new Image();
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:71' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 73.913040%)
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
72:   this->output = new Image();
73: 
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:77' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 73.913040%)
75:   float xc = (float)input->getWidth() / 2.0;
76:   float yc = (float)input->getHeight() / 2.0;
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:78' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 8.695652%)
76:   float yc = (float)input->getHeight() / 2.0;
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:79' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 17.391304%)
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:80' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 73.913040%)
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:81' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 8.695652%)
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:82' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 17.391304%)
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:83' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 4.347826%)
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:84' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 8.695652%)
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
86:   return true;
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:85' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 17.391304%)
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
86:   return true;
87: }
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 73.913040%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 17.391304%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 8.695652%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 73.913040%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:185' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 73.913040%)
183:   }
184: 
185:   done = true;
186: }
187: 
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR on 'CMakeFiles/serial.dir/image-inst.cpp' between line 211 and line 164 (LCP 78.260872%)
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
212:   }
213: }
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:277' and 'CMakeFiles/serial.dir/image-inst.cpp:164' (LCP 95.652176%)
275:                                       
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
162: 
163:   __instrument_this_function();
164:  return pixels[y * width + x]; }
165: 
166: /*


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 175 and line 176 (LCP 100.000000%)
173:   __instrument_this_function();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 175 and line 177 (LCP 17.391304%)
173:   __instrument_this_function();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 175 and line 178 (LCP 78.260872%)
173:   __instrument_this_function();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 175 and line 176 (LCP 78.260872%)
173:   __instrument_this_function();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 175 and line 177 (LCP 100.000000%)
173:   __instrument_this_function();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 175 and line 178 (LCP 17.391304%)
173:   __instrument_this_function();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:400' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
398:                                               __instrument_this_function();
399:                                             
400:   dest->r = a->r * (1.0 - weight) + b->r * weight;
401:   dest->g = a->g * (1.0 - weight) + b->g * weight;
402:   dest->b = a->b * (1.0 - weight) + b->b * weight;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW on file 'CMakeFiles/serial.dir/image-inst.cpp' at line 176 (LCP 78.260872%)
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 176 and line 177 (LCP 100.000000%)
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 176 and line 178 (LCP 17.391304%)
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 176 and line 211 (LCP 86.956520%)
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
212:   }
213: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 177 and line 176 (LCP 100.000000%)
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 209 and line 176 (LCP 78.260872%)
207:   __instrument_this_function();
208: 
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:43' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
41:   int i;
42:   for (i = 0; i < NRAN; i++) {
43:     urand[i].x = (double)rand() / RAND_MAX - 0.5;
44:   }
45:   for (i = 0; i < NRAN; i++) {
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:49' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
47:   }
48:   for (i = 0; i < NRAN; i++) {
49:     irand[i] = (int)(NRAN * ((double)rand() / RAND_MAX));
50:   }
51:   cout << "Loading from file " << srcname << endl;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:60' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
58:   fclose(fp);
59: 
60:   this->xres = xres;
61:   this->yres = yres;
62:   this->rays_per_pixel = rpp;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:512' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
510:     if (type == 's') {
511:       struct sphere *sph = new sphere();
512:       sph->next = obj_list->next;
513:       obj_list->next = sph;
514: 
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:513' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
511:       struct sphere *sph = new sphere();
512:       sph->next = obj_list->next;
513:       obj_list->next = sph;
514: 
515:       sph->pos = pos;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:77' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
75: 
76:   for (int i = 0; i < yres; i++) {
77:     render_scanline(xres, yres, i, out, rays_per_pixel);
78:   }
79: }
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:90' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
88: 
89:   out.clean();
90:   struct sphere *walker = obj_list;
91:   while (walker) {
92:     struct sphere *tmp = walker;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:117' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
115: 
116:   fprintf(stdout, "RayTracing Kernel:\n");
117:   fprintf(stdout, "Width: %d\t Height: %d\n", xres, yres);
118:   fprintf(stdout, "Aspect Ratio: %.1f\t RPP: %d\n", aspect, rays_per_pixel);
119:   fprintf(stdout, "Number of lights: %d\n\n", lnum);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:166' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
164:   struct spoint sp, nearest_sp;
165:   struct sphere *nearest_obj = 0;
166:   struct sphere *iter = obj_list->next;
167: 
168:   /* if we reached the recursion limit, bail out */
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:302' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
300: 
301:   k.x = cam.targ.x - cam.pos.x;
302:   k.y = cam.targ.y - cam.pos.y;
303:   k.z = cam.targ.z - cam.pos.z;
304:   NORMALIZE(k);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:302' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
300: 
301:   k.x = cam.targ.x - cam.pos.x;
302:   k.y = cam.targ.y - cam.pos.y;
303:   k.z = cam.targ.z - cam.pos.z;
304:   NORMALIZE(k);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:335' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
333:            cam.pos.x;
334:   orig.y = ray.orig.x * m[1][0] + ray.orig.y * m[1][1] + ray.orig.z * m[1][2] +
335:            cam.pos.y;
336:   orig.z = ray.orig.x * m[2][0] + ray.orig.y * m[2][1] + ray.orig.z * m[2][2] +
337:            cam.pos.z;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:210' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
208:     struct vec3 ldir;
209:     struct ray shadow_ray;
210:     struct sphere *iter = obj_list->next;
211:     int in_shadow = 0;
212: 
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:215' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
213:     ldir.x = lights[i].x - sp->pos.x;
214:     ldir.y = lights[i].y - sp->pos.y;
215:     ldir.z = lights[i].z - sp->pos.z;
216: 
217:     shadow_ray.orig = sp->pos;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:355' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
353: 
354:   if (sf == 0.0) {
355:     sf = 1.5 / (double)xres;
356:   }
357: 
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:375' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
373: 
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:375' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
373: 
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:376' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
378: }
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:61' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 8.695652%)
59:   __instrument_this_function();
60: 
61:   this->angle = angle;
62:   this->destname = destname;
63:   c1.x = 0.0;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:63' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
61:   this->angle = angle;
62:   this->destname = destname;
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:64' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
62:   this->destname = destname;
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:65' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 8.695652%)
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:66' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:67' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:68' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 8.695652%)
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:69' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:70' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
72:   this->output = new Image();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:71' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
72:   this->output = new Image();
73: 
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:77' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
75:   float xc = (float)input->getWidth() / 2.0;
76:   float yc = (float)input->getHeight() / 2.0;
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:78' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 8.695652%)
76:   float yc = (float)input->getHeight() / 2.0;
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:79' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:80' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:81' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 8.695652%)
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:82' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:83' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:84' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 8.695652%)
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
86:   return true;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:85' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
86:   return true;
87: }
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:100' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
98:   __instrument_this_function();
99: 
100:   if (!initialized) {
101:     fprintf(stderr, "Kernel Called Without Initialization\n");
102:     return;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:104' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
102:     return;
103:   }
104:   if (done) {
105:     fprintf(stderr, "Kernel Already Executed\n");
106:     return;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:109' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
107:   }
108: 
109:   unsigned int height = input->getHeight();
110:   unsigned int width = input->getWidth();
111:   // unsigned int depth = input->getDepth();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:110' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
108: 
109:   unsigned int height = input->getHeight();
110:   unsigned int width = input->getWidth();
111:   // unsigned int depth = input->getDepth();
112: 
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:126' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 8.695652%)
124: 
125:   /* STEP 1 */
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:127' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 8.695652%)
125:   /* STEP 1 */
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:128' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 8.695652%)
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
130:   int target_h = computeTargetHeight();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 8.695652%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:129' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 8.695652%)
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
130:   int target_h = computeTargetHeight();
131:   int target_w = computeTargetWidth();
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:132' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
130:   int target_h = computeTargetHeight();
131:   int target_w = computeTargetWidth();
132:   output->createImageFromTemplate(target_w, target_h, RGB_DEPTH);
133: 
134:   /* STEP 2 */
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:135' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 8.695652%)
133: 
134:   /* STEP 2 */
135:   unsigned int rev_angle = 360 - angle;
136:   float x_offset_target = (float)target_w / 2.0;
137:   float y_offset_target = (float)target_h / 2.0;
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:147' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
145: 
146:       /* If original image contains point, sample colour and write back */
147:       if (input->containsPixel(&origin_pix)) {
148:         int samples[4][2];
149:         Pixel colors[4];
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:158' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
156:                           ((k == 1 || k == 3) ? 1 : 0);
157:           // Must make sure sample positions are still valid image pixels
158:           if (samples[k][0] >= input->getWidth()) {
159:             samples[k][0] = input->getWidth() - 1;
160:           }
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:159' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
157:           // Must make sure sample positions are still valid image pixels
158:           if (samples[k][0] >= input->getWidth()) {
159:             samples[k][0] = input->getWidth() - 1;
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:161' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
159:             samples[k][0] = input->getWidth() - 1;
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
162:             samples[k][1] = input->getHeight() - 1;
163:           }
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:162' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
162:             samples[k][1] = input->getHeight() - 1;
163:           }
164:         }
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:176' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
174: 
175:         /* Write output */
176:         output->setPixelAt(j, i, & final);
177:       } else {
178:         /* Pixel is not in source image, write black color */
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:180' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
178:         /* Pixel is not in source image, write black color */
179:         Pixel final = {0, 0, 0};
180:         output->setPixelAt(j, i, & final);
181:       }
182:     }
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:185' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
183:   }
184: 
185:   done = true;
186: }
187: 
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 8.695652%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 8.695652%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:201' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
199:     fprintf(stderr, "Could Not Write Rotation Output\n");
200:   }
201:   output->clean();
202:   delete output;
203: }
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 211 and line 176 (LCP 78.260872%)
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
212:   }
213: }
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:202' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
200:   }
201:   output->clean();
202:   delete output;
203: }
204: 
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:239' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
237:   __instrument_this_function();
238: 
239:   if (!done) {
240:     return false;
241:   }
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:247' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
245:     return false;
246:   }
247:   if (output->getDepth() == 3) {
248:     out << "P6\n";
249:   } else {
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:252' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
250:     return false;
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:252' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
250:     return false;
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:253' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:254' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:255' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
257:       out.put(p.r);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:256' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 17.391304%)
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
257:       out.put(p.r);
258:       out.put(p.g);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:216' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
214: 
215:   fprintf(stdout, "Rotation Kernel:\n");
216:   fprintf(stdout, "Width: %d\t Height: %d\n", input->getWidth(),
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:217' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
215:   fprintf(stdout, "Rotation Kernel:\n");
216:   fprintf(stdout, "Width: %d\t Height: %d\n", input->getWidth(),
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:219' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:219' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 73.913040%)
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:220' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 8.695652%)
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
222: }
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:278' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:278' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:277' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
275:                                       
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:280' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
282: 
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:280' and 'CMakeFiles/serial.dir/image-inst.cpp:176' (LCP 100.000000%)
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
282: 
174: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:401' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
399:                                             
400:   dest->r = a->r * (1.0 - weight) + b->r * weight;
401:   dest->g = a->g * (1.0 - weight) + b->g * weight;
402:   dest->b = a->b * (1.0 - weight) + b->b * weight;
403: }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW on file 'CMakeFiles/serial.dir/image-inst.cpp' at line 177 (LCP 17.391304%)
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 177 and line 178 (LCP 78.260872%)
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 192 and line 177 (LCP 100.000000%)
190:   __instrument_this_function();
191: 
192:   bool x_correct = (pix->x < x_off) && (pix->x > (0.0 - x_off));
193:   bool y_correct = (pix->y < y_off) && (pix->y > (0.0 - y_off));
194:   if (x_correct && y_correct) {
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 209 and line 177 (LCP 100.000000%)
207:   __instrument_this_function();
208: 
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:49' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
47:   }
48:   for (i = 0; i < NRAN; i++) {
49:     irand[i] = (int)(NRAN * ((double)rand() / RAND_MAX));
50:   }
51:   cout << "Loading from file " << srcname << endl;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:61' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
59: 
60:   this->xres = xres;
61:   this->yres = yres;
62:   this->rays_per_pixel = rpp;
63:   aspect = (double)xres / (double)yres;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:63' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
61:   this->yres = yres;
62:   this->rays_per_pixel = rpp;
63:   aspect = (double)xres / (double)yres;
64: 
65:   out.createImageFromTemplate(xres, yres, RGB_DEPTH);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:496' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
494:       cam.pos = pos;
495:       cam.targ = col;
496:       cam.fov = rad;
497:       continue;
498:     }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:512' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 95.652176%)
510:     if (type == 's') {
511:       struct sphere *sph = new sphere();
512:       sph->next = obj_list->next;
513:       obj_list->next = sph;
514: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:76' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
74:   __instrument_this_function();
75: 
76:   for (int i = 0; i < yres; i++) {
77:     render_scanline(xres, yres, i, out, rays_per_pixel);
78:   }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:76' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
74:   __instrument_this_function();
75: 
76:   for (int i = 0; i < yres; i++) {
77:     render_scanline(xres, yres, i, out, rays_per_pixel);
78:   }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 211 and line 177 (LCP 100.000000%)
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
212:   }
213: }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:93' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 95.652176%)
91:   while (walker) {
92:     struct sphere *tmp = walker;
93:     walker = walker->next;
94:     delete tmp;
95:   }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:117' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
115: 
116:   fprintf(stdout, "RayTracing Kernel:\n");
117:   fprintf(stdout, "Width: %d\t Height: %d\n", xres, yres);
118:   fprintf(stdout, "Aspect Ratio: %.1f\t RPP: %d\n", aspect, rays_per_pixel);
119:   fprintf(stdout, "Number of lights: %d\n\n", lnum);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:118' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
116:   fprintf(stdout, "RayTracing Kernel:\n");
117:   fprintf(stdout, "Width: %d\t Height: %d\n", xres, yres);
118:   fprintf(stdout, "Aspect Ratio: %.1f\t RPP: %d\n", aspect, rays_per_pixel);
119:   fprintf(stdout, "Number of lights: %d\n\n", lnum);
120: }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:166' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 95.652176%)
164:   struct spoint sp, nearest_sp;
165:   struct sphere *nearest_obj = 0;
166:   struct sphere *iter = obj_list->next;
167: 
168:   /* if we reached the recursion limit, bail out */
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:301' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
299:   struct vec3 i, j = {0, 1, 0}, k, dir, orig, foo;
300: 
301:   k.x = cam.targ.x - cam.pos.x;
302:   k.y = cam.targ.y - cam.pos.y;
303:   k.z = cam.targ.z - cam.pos.z;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:301' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
299:   struct vec3 i, j = {0, 1, 0}, k, dir, orig, foo;
300: 
301:   k.x = cam.targ.x - cam.pos.x;
302:   k.y = cam.targ.y - cam.pos.y;
303:   k.z = cam.targ.z - cam.pos.z;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:333' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
331: 
332:   orig.x = ray.orig.x * m[0][0] + ray.orig.y * m[0][1] + ray.orig.z * m[0][2] +
333:            cam.pos.x;
334:   orig.y = ray.orig.x * m[1][0] + ray.orig.y * m[1][1] + ray.orig.z * m[1][2] +
335:            cam.pos.y;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:210' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 95.652176%)
208:     struct vec3 ldir;
209:     struct ray shadow_ray;
210:     struct sphere *iter = obj_list->next;
211:     int in_shadow = 0;
212: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:214' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
212: 
213:     ldir.x = lights[i].x - sp->pos.x;
214:     ldir.y = lights[i].y - sp->pos.y;
215:     ldir.z = lights[i].z - sp->pos.z;
216: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:359' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
357: 
358:   pt.x = ((double)x / (double)xres) - 0.5;
359:   pt.y = -(((double)y / (double)yres) - 0.65) / aspect;
360: 
361:   if (sample) {
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:359' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
357: 
358:   pt.x = ((double)x / (double)xres) - 0.5;
359:   pt.y = -(((double)y / (double)yres) - 0.65) / aspect;
360: 
361:   if (sample) {
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:364' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
362:     struct vec3 jt = jitter(x, y, sample);
363:     pt.x += jt.x * sf;
364:     pt.y += jt.y * sf / aspect;
365:   }
366:   return pt;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:375' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
373: 
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:376' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
378: }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:61' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 73.913040%)
59:   __instrument_this_function();
60: 
61:   this->angle = angle;
62:   this->destname = destname;
63:   c1.x = 0.0;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:63' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
61:   this->angle = angle;
62:   this->destname = destname;
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:64' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
62:   this->destname = destname;
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:65' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 73.913040%)
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:66' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:67' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:68' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 73.913040%)
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:69' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:70' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
72:   this->output = new Image();
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:71' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
72:   this->output = new Image();
73: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:77' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
75:   float xc = (float)input->getWidth() / 2.0;
76:   float yc = (float)input->getHeight() / 2.0;
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:78' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 73.913040%)
76:   float yc = (float)input->getHeight() / 2.0;
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:79' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:80' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:81' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 73.913040%)
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:82' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:83' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:84' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 73.913040%)
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
86:   return true;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:85' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
86:   return true;
87: }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:100' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
98:   __instrument_this_function();
99: 
100:   if (!initialized) {
101:     fprintf(stderr, "Kernel Called Without Initialization\n");
102:     return;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:104' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
102:     return;
103:   }
104:   if (done) {
105:     fprintf(stderr, "Kernel Already Executed\n");
106:     return;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:109' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
107:   }
108: 
109:   unsigned int height = input->getHeight();
110:   unsigned int width = input->getWidth();
111:   // unsigned int depth = input->getDepth();
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:110' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
108: 
109:   unsigned int height = input->getHeight();
110:   unsigned int width = input->getWidth();
111:   // unsigned int depth = input->getDepth();
112: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:126' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 73.913040%)
124: 
125:   /* STEP 1 */
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:127' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 73.913040%)
125:   /* STEP 1 */
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:128' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 73.913040%)
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
130:   int target_h = computeTargetHeight();
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 73.913040%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:129' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 73.913040%)
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
130:   int target_h = computeTargetHeight();
131:   int target_w = computeTargetWidth();
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:132' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
130:   int target_h = computeTargetHeight();
131:   int target_w = computeTargetWidth();
132:   output->createImageFromTemplate(target_w, target_h, RGB_DEPTH);
133: 
134:   /* STEP 2 */
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:135' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 73.913040%)
133: 
134:   /* STEP 2 */
135:   unsigned int rev_angle = 360 - angle;
136:   float x_offset_target = (float)target_w / 2.0;
137:   float y_offset_target = (float)target_h / 2.0;
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:147' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
145: 
146:       /* If original image contains point, sample colour and write back */
147:       if (input->containsPixel(&origin_pix)) {
148:         int samples[4][2];
149:         Pixel colors[4];
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:158' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
156:                           ((k == 1 || k == 3) ? 1 : 0);
157:           // Must make sure sample positions are still valid image pixels
158:           if (samples[k][0] >= input->getWidth()) {
159:             samples[k][0] = input->getWidth() - 1;
160:           }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:159' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
157:           // Must make sure sample positions are still valid image pixels
158:           if (samples[k][0] >= input->getWidth()) {
159:             samples[k][0] = input->getWidth() - 1;
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:161' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
159:             samples[k][0] = input->getWidth() - 1;
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
162:             samples[k][1] = input->getHeight() - 1;
163:           }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:162' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
162:             samples[k][1] = input->getHeight() - 1;
163:           }
164:         }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:176' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
174: 
175:         /* Write output */
176:         output->setPixelAt(j, i, & final);
177:       } else {
178:         /* Pixel is not in source image, write black color */
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:180' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
178:         /* Pixel is not in source image, write black color */
179:         Pixel final = {0, 0, 0};
180:         output->setPixelAt(j, i, & final);
181:       }
182:     }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:185' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
183:   }
184: 
185:   done = true;
186: }
187: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 73.913040%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 73.913040%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:201' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
199:     fprintf(stderr, "Could Not Write Rotation Output\n");
200:   }
201:   output->clean();
202:   delete output;
203: }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 211 and line 177 (LCP 4.347826%)
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
212:   }
213: }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:202' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
200:   }
201:   output->clean();
202:   delete output;
203: }
204: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:239' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
237:   __instrument_this_function();
238: 
239:   if (!done) {
240:     return false;
241:   }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:247' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
245:     return false;
246:   }
247:   if (output->getDepth() == 3) {
248:     out << "P6\n";
249:   } else {
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:252' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
250:     return false;
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:252' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
250:     return false;
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:253' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:254' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:255' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
257:       out.put(p.r);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:256' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 8.695652%)
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
257:       out.put(p.r);
258:       out.put(p.g);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:216' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
214: 
215:   fprintf(stdout, "Rotation Kernel:\n");
216:   fprintf(stdout, "Width: %d\t Height: %d\n", input->getWidth(),
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:217' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
215:   fprintf(stdout, "Rotation Kernel:\n");
216:   fprintf(stdout, "Width: %d\t Height: %d\n", input->getWidth(),
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:219' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:219' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 17.391304%)
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:220' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 73.913040%)
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
222: }
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:278' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:278' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:277' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
275:                                       
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:280' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
282: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:280' and 'CMakeFiles/serial.dir/image-inst.cpp:177' (LCP 100.000000%)
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
282: 
175:   if (x < width && y < height) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:402' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
400:   dest->r = a->r * (1.0 - weight) + b->r * weight;
401:   dest->g = a->g * (1.0 - weight) + b->g * weight;
402:   dest->b = a->b * (1.0 - weight) + b->b * weight;
403: }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:277' and 'CMakeFiles/serial.dir/image-inst.cpp:192' (LCP 100.000000%)
275:                                       
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
190:   __instrument_this_function();
191: 
192:   bool x_correct = (pix->x < x_off) && (pix->x > (0.0 - x_off));
193:   bool y_correct = (pix->y < y_off) && (pix->y > (0.0 - y_off));
194:   if (x_correct && y_correct) {


WAR between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:193' (LCP 100.000000%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
191: 
192:   bool x_correct = (pix->x < x_off) && (pix->x > (0.0 - x_off));
193:   bool y_correct = (pix->y < y_off) && (pix->y > (0.0 - y_off));
194:   if (x_correct && y_correct) {
195:     return true;


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 193 and line 178 (LCP 100.000000%)
191: 
192:   bool x_correct = (pix->x < x_off) && (pix->x > (0.0 - x_off));
193:   bool y_correct = (pix->y < y_off) && (pix->y > (0.0 - y_off));
194:   if (x_correct && y_correct) {
195:     return true;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 209 and line 178 (LCP 17.391304%)
207:   __instrument_this_function();
208: 
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 209 and line 211 (LCP 86.956520%)
207:   __instrument_this_function();
208: 
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
212:   }
213: }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:46' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
44:   }
45:   for (i = 0; i < NRAN; i++) {
46:     urand[i].y = (double)rand() / RAND_MAX - 0.5;
47:   }
48:   for (i = 0; i < NRAN; i++) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:46' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
44:   }
45:   for (i = 0; i < NRAN; i++) {
46:     urand[i].y = (double)rand() / RAND_MAX - 0.5;
47:   }
48:   for (i = 0; i < NRAN; i++) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:49' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
47:   }
48:   for (i = 0; i < NRAN; i++) {
49:     irand[i] = (int)(NRAN * ((double)rand() / RAND_MAX));
50:   }
51:   cout << "Loading from file " << srcname << endl;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:53' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
51:   cout << "Loading from file " << srcname << endl;
52:   FILE *fp = fopen(srcname.c_str(), "r");
53:   lnum = 0;
54:   if (!fp) {
55:     return false;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:62' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
60:   this->xres = xres;
61:   this->yres = yres;
62:   this->rays_per_pixel = rpp;
63:   aspect = (double)xres / (double)yres;
64: 
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:477' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
475: 
476:     if (type == 'l') {
477:       lights[lnum++] = pos;
478:       continue;
479:     }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:477' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
475: 
476:     if (type == 'l') {
477:       lights[lnum++] = pos;
478:       continue;
479:     }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:77' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
75: 
76:   for (int i = 0; i < yres; i++) {
77:     render_scanline(xres, yres, i, out, rays_per_pixel);
78:   }
79: }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:61' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 17.391304%)
59:   __instrument_this_function();
60: 
61:   this->angle = angle;
62:   this->destname = destname;
63:   c1.x = 0.0;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:63' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
61:   this->angle = angle;
62:   this->destname = destname;
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:64' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
62:   this->destname = destname;
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:65' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 17.391304%)
63:   c1.x = 0.0;
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:66' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
64:   c1.y = 0.0;
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:67' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
65:   c2.x = 0.0;
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:68' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 17.391304%)
66:   c2.y = 0.0;
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:69' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
67:   c3.x = 0.0;
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:70' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
68:   c3.y = 0.0;
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
72:   this->output = new Image();
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:71' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
69:   c4.x = 0.0;
70:   c4.y = 0.0;
71:   this->input = input;
72:   this->output = new Image();
73: 
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:77' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
75:   float xc = (float)input->getWidth() / 2.0;
76:   float yc = (float)input->getHeight() / 2.0;
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:78' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 17.391304%)
76:   float yc = (float)input->getHeight() / 2.0;
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:79' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
77:   ul.x = -xc;
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:80' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
78:   ul.y = yc;
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:81' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 17.391304%)
79:   ur.x = xc;
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:82' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
80:   ur.y = yc;
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:83' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
81:   ll.x = -xc;
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:84' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 17.391304%)
82:   ll.y = -yc;
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
86:   return true;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:85' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
83:   lr.x = xc;
84:   lr.y = -yc;
85:   initialized = true;
86:   return true;
87: }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:100' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
98:   __instrument_this_function();
99: 
100:   if (!initialized) {
101:     fprintf(stderr, "Kernel Called Without Initialization\n");
102:     return;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:104' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
102:     return;
103:   }
104:   if (done) {
105:     fprintf(stderr, "Kernel Already Executed\n");
106:     return;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:109' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
107:   }
108: 
109:   unsigned int height = input->getHeight();
110:   unsigned int width = input->getWidth();
111:   // unsigned int depth = input->getDepth();
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:110' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
108: 
109:   unsigned int height = input->getHeight();
110:   unsigned int width = input->getWidth();
111:   // unsigned int depth = input->getDepth();
112: 
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:126' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 17.391304%)
124: 
125:   /* STEP 1 */
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:127' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 17.391304%)
125:   /* STEP 1 */
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:128' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 17.391304%)
126:   rotatePoint((float *)&ul, (float *)&c1, angle);
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
130:   int target_h = computeTargetHeight();
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 17.391304%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:129' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 17.391304%)
127:   rotatePoint((float *)&ur, (float *)&c2, angle);
128:   rotatePoint((float *)&ll, (float *)&c3, angle);
129:   rotatePoint((float *)&lr, (float *)&c4, angle);
130:   int target_h = computeTargetHeight();
131:   int target_w = computeTargetWidth();
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:279' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:132' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
130:   int target_h = computeTargetHeight();
131:   int target_w = computeTargetWidth();
132:   output->createImageFromTemplate(target_w, target_h, RGB_DEPTH);
133: 
134:   /* STEP 2 */
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:135' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 17.391304%)
133: 
134:   /* STEP 2 */
135:   unsigned int rev_angle = 360 - angle;
136:   float x_offset_target = (float)target_w / 2.0;
137:   float y_offset_target = (float)target_h / 2.0;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:147' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
145: 
146:       /* If original image contains point, sample colour and write back */
147:       if (input->containsPixel(&origin_pix)) {
148:         int samples[4][2];
149:         Pixel colors[4];
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:158' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
156:                           ((k == 1 || k == 3) ? 1 : 0);
157:           // Must make sure sample positions are still valid image pixels
158:           if (samples[k][0] >= input->getWidth()) {
159:             samples[k][0] = input->getWidth() - 1;
160:           }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:159' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
157:           // Must make sure sample positions are still valid image pixels
158:           if (samples[k][0] >= input->getWidth()) {
159:             samples[k][0] = input->getWidth() - 1;
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:161' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
159:             samples[k][0] = input->getWidth() - 1;
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
162:             samples[k][1] = input->getHeight() - 1;
163:           }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:162' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
160:           }
161:           if (samples[k][1] >= input->getHeight()) {
162:             samples[k][1] = input->getHeight() - 1;
163:           }
164:         }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:168' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
166:         /* Get colors for samples */
167:         for (int k = 0; k < 4; k++) {
168:           colors[k] = input->getPixelAt(samples[k][0], samples[k][1]);
169:         }
170: 
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:176' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
174: 
175:         /* Write output */
176:         output->setPixelAt(j, i, & final);
177:       } else {
178:         /* Pixel is not in source image, write black color */
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:180' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
178:         /* Pixel is not in source image, write black color */
179:         Pixel final = {0, 0, 0};
180:         output->setPixelAt(j, i, & final);
181:       }
182:     }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:185' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
183:   }
184: 
185:   done = true;
186: }
187: 
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 17.391304%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:308' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
306:   __instrument_this_function();
307: 
308:   float seq[4] = {c1.y, c2.y, c3.y, c4.y};
309:   float max = findMax(seq);
310:   float min = findMin(seq);
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 17.391304%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:324' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
322:   __instrument_this_function();
323: 
324:   float seq[4] = {c1.x, c2.x, c3.x, c4.x};
325:   float max = findMax(seq);
326:   float min = findMin(seq);
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:201' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
199:     fprintf(stderr, "Could Not Write Rotation Output\n");
200:   }
201:   output->clean();
202:   delete output;
203: }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW on 'CMakeFiles/serial.dir/image-inst.cpp' between line 211 and line 178 (LCP 17.391304%)
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
212:   }
213: }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:202' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
200:   }
201:   output->clean();
202:   delete output;
203: }
204: 
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:239' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
237:   __instrument_this_function();
238: 
239:   if (!done) {
240:     return false;
241:   }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:247' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
245:     return false;
246:   }
247:   if (output->getDepth() == 3) {
248:     out << "P6\n";
249:   } else {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:252' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
250:     return false;
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:252' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
250:     return false;
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:253' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
251:   }
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:254' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
252:   out << output->getWidth() << " " << output->getHeight() << "\n"
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:255' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
253:       << output->getMaxcolor() << "\n";
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
257:       out.put(p.r);
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:256' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 73.913040%)
254:   for (int i = 0; i < (int)output->getHeight(); i++) {
255:     for (int j = 0; j < (int)output->getWidth(); j++) {
256:       Pixel p = output->getPixelAt(j, i);
257:       out.put(p.r);
258:       out.put(p.g);
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:216' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
214: 
215:   fprintf(stdout, "Rotation Kernel:\n");
216:   fprintf(stdout, "Width: %d\t Height: %d\n", input->getWidth(),
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:217' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
215:   fprintf(stdout, "Rotation Kernel:\n");
216:   fprintf(stdout, "Width: %d\t Height: %d\n", input->getWidth(),
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:219' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:219' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 8.695652%)
217:           input->getHeight());
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:220' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 17.391304%)
218:   fprintf(stdout, "Pixels: %.2fM\t Angle: %d°\n",
219:           (double)(input->getWidth() * input->getHeight()) / 1000000.0,
220:           (int)angle);
221:   fprintf(stdout, "Dest. File: %s\n\n", destname.c_str());
222: }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:278' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:278' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:277' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
275:                                       
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:280' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
282: 
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/rotation_engine-inst.cpp:280' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
282: 
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:118' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
116:   fprintf(stdout, "RayTracing Kernel:\n");
117:   fprintf(stdout, "Width: %d\t Height: %d\n", xres, yres);
118:   fprintf(stdout, "Aspect Ratio: %.1f\t RPP: %d\n", aspect, rays_per_pixel);
119:   fprintf(stdout, "Number of lights: %d\n\n", lnum);
120: }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:119' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
117:   fprintf(stdout, "Width: %d\t Height: %d\n", xres, yres);
118:   fprintf(stdout, "Aspect Ratio: %.1f\t RPP: %d\n", aspect, rays_per_pixel);
119:   fprintf(stdout, "Number of lights: %d\n\n", lnum);
120: }
121: 
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:303' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
301:   k.x = cam.targ.x - cam.pos.x;
302:   k.y = cam.targ.y - cam.pos.y;
303:   k.z = cam.targ.z - cam.pos.z;
304:   NORMALIZE(k);
305: 
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:303' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
301:   k.x = cam.targ.x - cam.pos.x;
302:   k.y = cam.targ.y - cam.pos.y;
303:   k.z = cam.targ.z - cam.pos.z;
304:   NORMALIZE(k);
305: 
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:337' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
335:            cam.pos.y;
336:   orig.z = ray.orig.x * m[2][0] + ray.orig.y * m[2][1] + ray.orig.z * m[2][2] +
337:            cam.pos.z;
338: 
339:   ray.orig = orig;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW on file 'CMakeFiles/serial.dir/ray_engine-inst.cpp' at line 422 (LCP 100.000000%)
420:       t2 = t1;
421:     }
422:     sp->dist = t1 < t2 ? t1 : t2;
423: 
424:     sp->pos.x = ray.orig.x + ray.dir.x * sp->dist;


WAR on 'CMakeFiles/serial.dir/ray_engine-inst.cpp' between line 422 and line 425 (LCP 100.000000%)
420:       t2 = t1;
421:     }
422:     sp->dist = t1 < t2 ? t1 : t2;
423: 
424:     sp->pos.x = ray.orig.x + ray.dir.x * sp->dist;
423: 
424:     sp->pos.x = ray.orig.x + ray.dir.x * sp->dist;
425:     sp->pos.y = ray.orig.y + ray.dir.y * sp->dist;
426:     sp->pos.z = ray.orig.z + ray.dir.z * sp->dist;
427: 


WAW on file 'CMakeFiles/serial.dir/ray_engine-inst.cpp' at line 424 (LCP 100.000000%)
422:     sp->dist = t1 < t2 ? t1 : t2;
423: 
424:     sp->pos.x = ray.orig.x + ray.dir.x * sp->dist;
425:     sp->pos.y = ray.orig.y + ray.dir.y * sp->dist;
426:     sp->pos.z = ray.orig.z + ray.dir.z * sp->dist;


WAR on 'CMakeFiles/serial.dir/ray_engine-inst.cpp' between line 424 and line 428 (LCP 100.000000%)
422:     sp->dist = t1 < t2 ? t1 : t2;
423: 
424:     sp->pos.x = ray.orig.x + ray.dir.x * sp->dist;
425:     sp->pos.y = ray.orig.y + ray.dir.y * sp->dist;
426:     sp->pos.z = ray.orig.z + ray.dir.z * sp->dist;
426:     sp->pos.z = ray.orig.z + ray.dir.z * sp->dist;
427: 
428:     sp->normal.x = (sp->pos.x - sph->pos.x) / sph->rad;
429:     sp->normal.y = (sp->pos.y - sph->pos.y) / sph->rad;
430:     sp->normal.z = (sp->pos.z - sph->pos.z) / sph->rad;


WAW on file 'CMakeFiles/serial.dir/ray_engine-inst.cpp' at line 425 (LCP 100.000000%)
423: 
424:     sp->pos.x = ray.orig.x + ray.dir.x * sp->dist;
425:     sp->pos.y = ray.orig.y + ray.dir.y * sp->dist;
426:     sp->pos.z = ray.orig.z + ray.dir.z * sp->dist;
427: 


WAR on 'CMakeFiles/serial.dir/ray_engine-inst.cpp' between line 425 and line 429 (LCP 100.000000%)
423: 
424:     sp->pos.x = ray.orig.x + ray.dir.x * sp->dist;
425:     sp->pos.y = ray.orig.y + ray.dir.y * sp->dist;
426:     sp->pos.z = ray.orig.z + ray.dir.z * sp->dist;
427: 
427: 
428:     sp->normal.x = (sp->pos.x - sph->pos.x) / sph->rad;
429:     sp->normal.y = (sp->pos.y - sph->pos.y) / sph->rad;
430:     sp->normal.z = (sp->pos.z - sph->pos.z) / sph->rad;
431: 


WAW on file 'CMakeFiles/serial.dir/ray_engine-inst.cpp' at line 426 (LCP 100.000000%)
424:     sp->pos.x = ray.orig.x + ray.dir.x * sp->dist;
425:     sp->pos.y = ray.orig.y + ray.dir.y * sp->dist;
426:     sp->pos.z = ray.orig.z + ray.dir.z * sp->dist;
427: 
428:     sp->normal.x = (sp->pos.x - sph->pos.x) / sph->rad;


WAR on 'CMakeFiles/serial.dir/ray_engine-inst.cpp' between line 426 and line 430 (LCP 100.000000%)
424:     sp->pos.x = ray.orig.x + ray.dir.x * sp->dist;
425:     sp->pos.y = ray.orig.y + ray.dir.y * sp->dist;
426:     sp->pos.z = ray.orig.z + ray.dir.z * sp->dist;
427: 
428:     sp->normal.x = (sp->pos.x - sph->pos.x) / sph->rad;
428:     sp->normal.x = (sp->pos.x - sph->pos.x) / sph->rad;
429:     sp->normal.y = (sp->pos.y - sph->pos.y) / sph->rad;
430:     sp->normal.z = (sp->pos.z - sph->pos.z) / sph->rad;
431: 
432:     sp->vref = reflect(ray.dir, sp->normal);


WAW on file 'CMakeFiles/serial.dir/ray_engine-inst.cpp' at line 428 (LCP 100.000000%)
426:     sp->pos.z = ray.orig.z + ray.dir.z * sp->dist;
427: 
428:     sp->normal.x = (sp->pos.x - sph->pos.x) / sph->rad;
429:     sp->normal.y = (sp->pos.y - sph->pos.y) / sph->rad;
430:     sp->normal.z = (sp->pos.z - sph->pos.z) / sph->rad;


WAW on file 'CMakeFiles/serial.dir/ray_engine-inst.cpp' at line 429 (LCP 100.000000%)
427: 
428:     sp->normal.x = (sp->pos.x - sph->pos.x) / sph->rad;
429:     sp->normal.y = (sp->pos.y - sph->pos.y) / sph->rad;
430:     sp->normal.z = (sp->pos.z - sph->pos.z) / sph->rad;
431: 


WAW on file 'CMakeFiles/serial.dir/ray_engine-inst.cpp' at line 430 (LCP 100.000000%)
428:     sp->normal.x = (sp->pos.x - sph->pos.x) / sph->rad;
429:     sp->normal.y = (sp->pos.y - sph->pos.y) / sph->rad;
430:     sp->normal.z = (sp->pos.z - sph->pos.z) / sph->rad;
431: 
432:     sp->vref = reflect(ray.dir, sp->normal);


RAW on file 'CMakeFiles/serial.dir/ray_engine-inst.cpp' at line 433 (LCP 100.000000%)
431: 
432:     sp->vref = reflect(ray.dir, sp->normal);
433:     NORMALIZE(sp->vref);
434:   }
435:   return 1;


RAW on file 'CMakeFiles/serial.dir/ray_engine-inst.cpp' at line 433 (LCP 100.000000%)
431: 
432:     sp->vref = reflect(ray.dir, sp->normal);
433:     NORMALIZE(sp->vref);
434:   }
435:   return 1;


RAW on file 'CMakeFiles/serial.dir/ray_engine-inst.cpp' at line 433 (LCP 100.000000%)
431: 
432:     sp->vref = reflect(ray.dir, sp->normal);
433:     NORMALIZE(sp->vref);
434:   }
435:   return 1;


RAW on file 'CMakeFiles/serial.dir/ray_engine-inst.cpp' at line 433 (LCP 100.000000%)
431: 
432:     sp->vref = reflect(ray.dir, sp->normal);
433:     NORMALIZE(sp->vref);
434:   }
435:   return 1;


WAW on file 'CMakeFiles/serial.dir/ray_engine-inst.cpp' at line 433 (LCP 100.000000%)
431: 
432:     sp->vref = reflect(ray.dir, sp->normal);
433:     NORMALIZE(sp->vref);
434:   }
435:   return 1;


RAW on file 'CMakeFiles/serial.dir/ray_engine-inst.cpp' at line 433 (LCP 100.000000%)
431: 
432:     sp->vref = reflect(ray.dir, sp->normal);
433:     NORMALIZE(sp->vref);
434:   }
435:   return 1;


WAW on file 'CMakeFiles/serial.dir/ray_engine-inst.cpp' at line 433 (LCP 100.000000%)
431: 
432:     sp->vref = reflect(ray.dir, sp->normal);
433:     NORMALIZE(sp->vref);
434:   }
435:   return 1;


RAW on file 'CMakeFiles/serial.dir/ray_engine-inst.cpp' at line 433 (LCP 100.000000%)
431: 
432:     sp->vref = reflect(ray.dir, sp->normal);
433:     NORMALIZE(sp->vref);
434:   }
435:   return 1;


WAW on file 'CMakeFiles/serial.dir/ray_engine-inst.cpp' at line 433 (LCP 100.000000%)
431: 
432:     sp->vref = reflect(ray.dir, sp->normal);
433:     NORMALIZE(sp->vref);
434:   }
435:   return 1;


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:206' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
204: 
205:   /* for all lights ... */
206:   for (i = 0; i < lnum; i++) {
207:     double ispec, idiff;
208:     struct vec3 ldir;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:213' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
211:     int in_shadow = 0;
212: 
213:     ldir.x = lights[i].x - sp->pos.x;
214:     ldir.y = lights[i].y - sp->pos.y;
215:     ldir.z = lights[i].z - sp->pos.z;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:206' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
204: 
205:   /* for all lights ... */
206:   for (i = 0; i < lnum; i++) {
207:     double ispec, idiff;
208:     struct vec3 ldir;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW on 'CMakeFiles/serial.dir/ray_engine-inst.cpp' between line 354 and line 355 (LCP 100.000000%)
352:   static double sf = 0.0;
353: 
354:   if (sf == 0.0) {
355:     sf = 1.5 / (double)xres;
356:   }
353: 
354:   if (sf == 0.0) {
355:     sf = 1.5 / (double)xres;
356:   }
357: 


RAW on 'CMakeFiles/serial.dir/ray_engine-inst.cpp' between line 363 and line 355 (LCP 100.000000%)
361:   if (sample) {
362:     struct vec3 jt = jitter(x, y, sample);
363:     pt.x += jt.x * sf;
364:     pt.y += jt.y * sf / aspect;
365:   }
353: 
354:   if (sf == 0.0) {
355:     sf = 1.5 / (double)xres;
356:   }
357: 


RAW on 'CMakeFiles/serial.dir/ray_engine-inst.cpp' between line 364 and line 355 (LCP 100.000000%)
362:     struct vec3 jt = jitter(x, y, sample);
363:     pt.x += jt.x * sf;
364:     pt.y += jt.y * sf / aspect;
365:   }
366:   return pt;
353: 
354:   if (sf == 0.0) {
355:     sf = 1.5 / (double)xres;
356:   }
357: 


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:375' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
373: 
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:376' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
378: }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:376' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
378: }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


RAW between lines 'CMakeFiles/serial.dir/ray_engine-inst.cpp:376' and 'CMakeFiles/serial.dir/image-inst.cpp:178' (LCP 100.000000%)
374:   struct vec3 pt;
375:   pt.x = urand[(x + (y << 2) + irand[(x + s) & MASK]) & MASK].x;
376:   pt.y = urand[(y + (x << 2) + irand[(y + s) & MASK]) & MASK].y;
377:   return pt;
378: }
176:     pixels[width * y + x].r = p->r;
177:     pixels[width * y + x].g = p->g;
178:     pixels[width * y + x].b = p->b;
179:   }
180: }


WAW on file 'CMakeFiles/serial.dir/rotation_engine-inst.cpp' at line 279 (LCP 100.000000%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }


WAR on 'CMakeFiles/serial.dir/rotation_engine-inst.cpp' between line 279 and line 382 (LCP 100.000000%)
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
280:       ((Coord *)pt)->x * sin(rad) + ((Coord *)pt)->y * cos(rad);
281: }
380:   Pixel sample_v_upper, sample_v_lower;
381:   float x_weight = round(sample_pos->x - floor(sample_pos->x), PRECISION);
382:   float y_weight = round(sample_pos->y - floor(sample_pos->y), PRECISION);
383: 
384:   interpolateLinear(&colors[0], &colors[3], &sample_v_upper, x_weight);


WAW on file 'CMakeFiles/serial.dir/image-inst.cpp' at line 211 (LCP 86.956520%)
209:   if (pixels) {
210:     delete[] pixels;
211:     pixels = NULL;
212:   }
213: }


WAW on file 'CMakeFiles/serial.dir/rotation_engine-inst.cpp' at line 277 (LCP 100.000000%)
275:                                       
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =


WAR on 'CMakeFiles/serial.dir/rotation_engine-inst.cpp' between line 277 and line 381 (LCP 100.000000%)
275:                                       
276:   float rad = (float)angle / 180 * PI;
277:   ((Coord *)target)->x =
278:       ((Coord *)pt)->x * cos(rad) - ((Coord *)pt)->y * sin(rad);
279:   ((Coord *)target)->y =
379:   // uint32_t r, g, b;
380:   Pixel sample_v_upper, sample_v_lower;
381:   float x_weight = round(sample_pos->x - floor(sample_pos->x), PRECISION);
382:   float y_weight = round(sample_pos->y - floor(sample_pos->y), PRECISION);
383: 


WAW on file 'CMakeFiles/serial.dir/rotation_engine-inst.cpp' at line 402 (LCP 100.000000%)
400:   dest->r = a->r * (1.0 - weight) + b->r * weight;
401:   dest->g = a->g * (1.0 - weight) + b->g * weight;
402:   dest->b = a->b * (1.0 - weight) + b->b * weight;
403: }


WAR on file 'CMakeFiles/serial.dir/rotation_engine-inst.cpp' at line 402 (LCP 100.000000%)
400:   dest->r = a->r * (1.0 - weight) + b->r * weight;
401:   dest->g = a->g * (1.0 - weight) + b->g * weight;
402:   dest->b = a->b * (1.0 - weight) + b->b * weight;
403: }


WAW on file 'CMakeFiles/serial.dir/rotation_engine-inst.cpp' at line 402 (LCP 100.000000%)
400:   dest->r = a->r * (1.0 - weight) + b->r * weight;
401:   dest->g = a->g * (1.0 - weight) + b->g * weight;
402:   dest->b = a->b * (1.0 - weight) + b->b * weight;
403: }


WAR on file 'CMakeFiles/serial.dir/rotation_engine-inst.cpp' at line 402 (LCP 100.000000%)
400:   dest->r = a->r * (1.0 - weight) + b->r * weight;
401:   dest->g = a->g * (1.0 - weight) + b->g * weight;
402:   dest->b = a->b * (1.0 - weight) + b->b * weight;
403: }


WAW on file 'CMakeFiles/serial.dir/rotation_engine-inst.cpp' at line 402 (LCP 100.000000%)
400:   dest->r = a->r * (1.0 - weight) + b->r * weight;
401:   dest->g = a->g * (1.0 - weight) + b->g * weight;
402:   dest->b = a->b * (1.0 - weight) + b->b * weight;
403: }


WAR on file 'CMakeFiles/serial.dir/rotation_engine-inst.cpp' at line 400 (LCP 100.000000%)
398:                                               __instrument_this_function();
399:                                             
400:   dest->r = a->r * (1.0 - weight) + b->r * weight;
401:   dest->g = a->g * (1.0 - weight) + b->g * weight;
402:   dest->b = a->b * (1.0 - weight) + b->b * weight;


WAR on file 'CMakeFiles/serial.dir/rotation_engine-inst.cpp' at line 400 (LCP 100.000000%)
398:                                               __instrument_this_function();
399:                                             
400:   dest->r = a->r * (1.0 - weight) + b->r * weight;
401:   dest->g = a->g * (1.0 - weight) + b->g * weight;
402:   dest->b = a->b * (1.0 - weight) + b->b * weight;


WAW on file 'CMakeFiles/serial.dir/rotation_engine-inst.cpp' at line 400 (LCP 100.000000%)
398:                                               __instrument_this_function();
399:                                             
400:   dest->r = a->r * (1.0 - weight) + b->r * weight;
401:   dest->g = a->g * (1.0 - weight) + b->g * weight;
402:   dest->b = a->b * (1.0 - weight) + b->b * weight;


WAR on file 'CMakeFiles/serial.dir/rotation_engine-inst.cpp' at line 401 (LCP 100.000000%)
399:                                             
400:   dest->r = a->r * (1.0 - weight) + b->r * weight;
401:   dest->g = a->g * (1.0 - weight) + b->g * weight;
402:   dest->b = a->b * (1.0 - weight) + b->b * weight;
403: }


WAR on file 'CMakeFiles/serial.dir/rotation_engine-inst.cpp' at line 401 (LCP 100.000000%)
399:                                             
400:   dest->r = a->r * (1.0 - weight) + b->r * weight;
401:   dest->g = a->g * (1.0 - weight) + b->g * weight;
402:   dest->b = a->b * (1.0 - weight) + b->b * weight;
403: }


WAW on file 'CMakeFiles/serial.dir/rotation_engine-inst.cpp' at line 401 (LCP 100.000000%)
399:                                             
400:   dest->r = a->r * (1.0 - weight) + b->r * weight;
401:   dest->g = a->g * (1.0 - weight) + b->g * weight;
402:   dest->b = a->b * (1.0 - weight) + b->b * weight;
403: }

==== Dependence Checker Report End   ====
diff: ../output/scene_out-serial-01: No such file or directory
diff: ../output/scene_out-serial-02: No such file or directory
diff: ../output/scene_out-serial-03: No such file or directory
diff: ../output/scene_out-serial-04: No such file or directory
diff: ../output/scene_out-serial-05: No such file or directory
diff: ../output/scene_out-serial-06: No such file or directory
diff: ../output/scene_out-serial-07: No such file or directory
diff: ../output/scene_out-serial-08: No such file or directory
diff: ../output/scene_out-serial-09: No such file or directory
diff: ../output/scene_out-serial-10: No such file or directory
diff: ../output/scene_out-serial-11: No such file or directory
diff: ../output/scene_out-serial-12: No such file or directory
diff: ../output/scene_out-serial-13: No such file or directory
diff: ../output/scene_out-serial-14: No such file or directory
diff: ../output/scene_out-serial-15: No such file or directory
diff: ../output/scene_out-serial-16: No such file or directory
diff: ../output/scene_out-serial-17: No such file or directory
diff: ../output/scene_out-serial-18: No such file or directory
diff: ../output/scene_out-serial-19: No such file or directory
diff: ../output/scene_out-serial-20: No such file or directory
diff: ../output/scene_out-serial-21: No such file or directory
diff: ../output/scene_out-serial-22: No such file or directory
diff: ../output/scene_out-serial-23: No such file or directory
diff: ../output/scene_out-serial-24: No such file or directory
